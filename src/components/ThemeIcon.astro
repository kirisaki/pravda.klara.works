---

---

<div class="toggle-wrapper">
    <svg width="21px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path
            class="sun"
            fill-rule="evenodd"
            d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
        ></path>
    </svg>
    <label class="toggle">
        <input type="checkbox" id="themeToggle" />
    </label>
    <svg width="25px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path
            class="moon"
            fill-rule="evenodd"
            d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
        ></path>
    </svg>
</div>
<style>
    .sun {
        fill: var(--white);
    }
    .moon {
        fill: var(--white);
    }
    .toggle-wrapper {
        align: right;
        display: flex;
        align-items: center;
        width: 120px;
        height: 3rem;
    }
    .toggle-wrapper svg {
        padding: 2px 5px;
    }
    .toggle {
        display: flex;
        align-items: center;
        position: relative;
        width: 50px;
        height: 25px;
        border-radius: 52px;
        box-sizing: content-box;
        background-color: #eeeeee33;
        cursor: pointer;
        transition: background-color 0.4s;
    }

    .toggle::before {
        position: absolute;
        left: 5px;
        width: 21px;
        height: 21px;
        border-radius: 50%;
        background-color: var(--white);
        content: "";
        transition: left 0.4s;
    }

    .toggle:has(:checked)::before {
        left: 25px;
    }

    .toggle:has(:checked)::after {
        content: "";
    }

    .toggle input {
        display: none;
    }
</style>
<script is:inline>
    const ThemeSwitcher = {
        THEMES: {
            LIGHT: "light",
            DARK: "dark",
            SYSTEM: "system",
        },

        STORAGE_KEY: "preferred-theme",

        getCurrentTheme() {
            const savedTheme = localStorage.getItem(this.STORAGE_KEY);

            if (savedTheme) {
                return savedTheme;
            }

            return window.matchMedia("(prefers-color-scheme: dark)").matches
                ? this.THEMES.DARK
                : this.THEMES.LIGHT;
        },

        setTheme(theme) {
            if (!Object.values(this.THEMES).includes(theme)) {
                console.error(`無効なテーマ: ${theme}`);
                return;
            }

            localStorage.setItem(this.STORAGE_KEY, theme);

            this.applyTheme(theme);
            this.updateCheckboxes(theme);
        },

        applyTheme(theme) {
            let effectiveTheme = theme;

            if (theme === this.THEMES.SYSTEM) {
                effectiveTheme = window.matchMedia(
                    "(prefers-color-scheme: dark)",
                ).matches
                    ? this.THEMES.DARK
                    : this.THEMES.LIGHT;
            }

            document.documentElement.setAttribute("data-theme", effectiveTheme);

            if (effectiveTheme === this.THEMES.DARK) {
                document.documentElement.classList.add("dark-mode");
                document.documentElement.classList.remove("light-mode");
            } else {
                document.documentElement.classList.add("light-mode");
                document.documentElement.classList.remove("dark-mode");
            }
        },

        updateCheckboxes(theme) {
            const darkModeCheckbox = document.getElementById("themeToggle");

            if (darkModeCheckbox) {
                darkModeCheckbox.checked = theme === this.THEMES.DARK;
            }
        },

        watchSystemThemeChanges() {
            const mediaQuery = window.matchMedia(
                "(prefers-color-scheme: dark)",
            );

            mediaQuery.addEventListener("change", () => {
                if (this.getCurrentTheme() === this.THEMES.SYSTEM) {
                    this.applyTheme(this.THEMES.SYSTEM);
                }
            });
        },

        init() {
            const currentTheme = this.getCurrentTheme();

            this.applyTheme(currentTheme);

            this.updateCheckboxes(currentTheme);

            this.watchSystemThemeChanges();

            this.setupEventListeners();
        },

        setupEventListeners() {
            const darkModeCheckbox = document.getElementById("themeToggle");
            if (darkModeCheckbox) {
                darkModeCheckbox.addEventListener("change", (e) => {
                    this.setTheme(
                        e.target.checked ? this.THEMES.DARK : this.THEMES.LIGHT,
                    );
                });
            }
        },
    };

    document.addEventListener("DOMContentLoaded", () => {
        ThemeSwitcher.init();
    });
</script>
